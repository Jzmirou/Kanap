{
  "version": 3,
  "sources": ["../js/utils/Cart.js", "../js/functions/api.js", "../js/functions/dom.js", "../js/components/Loading.js", "../js/functions/validation.js", "../js/components/Basket/BasketForm.js", "../js/components/Basket/BasketItem.js", "../js/components/Basket/BasketTotal.js", "../js/components/Basket/Basket.js", "../js/cart.js"],
  "sourcesContent": ["/**\n * @typedef {Objet} CartItem\n * @property {string} id\n * @property {number} quantity\n * @property {string} color\n */\n\nexport class Cart {\n    /**\n     * @type {Array<CartItem>}\n     */\n    cart;\n    constructor() {\n        if (localStorage.getItem(\"cart\")) {\n            const data = JSON.parse(localStorage.getItem(\"cart\"));\n            this.cart = data;\n        } else {\n            this.cart = [];\n        }\n    }\n    /**\n     * Ajoute un produit dans un Array Cart et l'enregistre dans le localStorage\n     * @param {string} id\n     * @param {string} color\n     * @param {number} quantity\n     */\n    addCart = (id, color, quantity = 1) => {\n        const addQuantity = Number(quantity);\n        if (addQuantity <= 0)\n            throw new Error(\"on ne peux pas ajout\u00E9 0 ou moins en quantit\u00E9\"); // Cr\u00E9er une error si la quantit\u00E9 ajout\u00E9 est <= 0\n        // Trouve le produit dans l'Array Cart a partir de l'id et de la couleur\n        const find = this.cart.find(\n            (element) => element.id === id && element.color === color\n        );\n        // Augmente la quantit\u00E9 si le produit est d\u00E9j\u00E0 dans le panier\n        if (find) {\n            const totalQuantity = find.quantity + addQuantity;\n            // Renvoie un erreur si la quantit\u00E9 total est sup\u00E9rieur \u00E0 100\n            this.checkMaxProduct(id, color, quantity);\n            find.quantity = totalQuantity;\n        } else {\n            // Ajoute le produit dans la carte si il n'est pas d\u00E9j\u00E0 pr\u00E9sent\n            this.cart.push({\n                id: id,\n                quantity: addQuantity,\n                color: color,\n            });\n        }\n        this.save();\n        console.log(\"Produit ajout\u00E9\");\n    };\n    /**\n     * Supprime un produit ou retire la quantit\u00E9 dans un Array Cart et l'enregistre dans le localStorage\n     * @param {string} id\n     * @param {string} color\n     * @param {number} quantity\n     */\n    removeCart = (id, color, quantity) => {\n        const find = this.findProduct(id, color);\n        if (!find)\n            throw new Error(\n                \"Le produit n'est pas le panier, il ne peux pas \u00EAtre supprim\u00E9\"\n            );\n        const findQuantity = Number(find.quantity);\n        const removeQuantity = Number(quantity) || findQuantity;\n        // Si la quantit\u00E9 retir\u00E9 est \u00E9gale \u00E0 la quantit\u00E9 du produit dans la panier il est supprim\u00E9\n        if (findQuantity === removeQuantity) {\n            const indexOfObjet = this.cart.findIndex(\n                (element) => element.id === id && element.color === color\n            );\n            this.cart.splice(indexOfObjet, 1);\n        } else {\n            find.quantity -= removeQuantity;\n        }\n        this.save();\n        console.log(\"Produit supprim\u00E9\");\n    };\n    /**\n     * Sauvegarde le panier dans le localStorage\n     */\n    save = () => {\n        const cartData = JSON.stringify(this.cart);\n        localStorage.setItem(\"cart\", cartData);\n    };\n\n    /**\n     * Trouve un produit dans le panier \u00E0 partir de son id et sa couleur\n     * @param {string} id\n     * @param {string} color\n     * @returns {CartItem}\n     */\n    findProduct = (id, color) => {\n        return this.cart.find(\n            (element) => element.id === id && element.color === color\n        );\n    };\n    /**\n     * Renvoie un tableau d'id unique des produit dans le panier\n     * @returns {Array<string>}\n     */\n    getCartProductIds = () => {\n        const productsId = new Set();\n        for (const product of this.cart) {\n            productsId.add(product.id);\n        }\n        return [...productsId];\n    };\n    /**\n     * V\u00E9rifie si le panier est vide\n     * @returns {boolean}\n     */\n    isCartEmpty = () => {\n        return !this.cart || this.cart.length === 0;\n    };\n\n    /**\n     * V\u00E9rifie si la limite d'un produit du panier est atteint\n     * @param {string} id \n     * @param {string} color \n     * @param {number} quantity \n     * @throws Retourne une erreur si la quantit\u00E9 maximal est atteint\n     * @returns \n     */\n    checkMaxProduct = (id, color, quantity) => {\n        const find = this.findProduct(id, color);\n        if (!find) return\n        const maxQuantity = 100;\n        const totalQuantity = (Number(find.quantity) + quantity);\n        const quantityRestant = maxQuantity - Number(find.quantity);\n        if (Number(find.quantity) >= maxQuantity)\n            throw new Error(\"La quantit\u00E9 maximal pour ce produit est atteint\");\n        if (totalQuantity > maxQuantity)\n            throw new Error(\n                `Quantit\u00E9 maximal atteint, quantit\u00E9 restante: ${\n                    Math.abs( maxQuantity - find.quantity)\n                }`\n            );\n    };\n}\n", "const api_url = \"http://localhost:3000/api\"\n\n/**\n * @typedef {Object} ProductData\n * @property {string[]} color\n * @property {string} id\n * @property {string} color\n * @property {string} name\n * @property {number} price\n * @property {string} image_url\n * @property {string} description\n * @property {string} image_alt_text\n */\n\n/**\n * @typedef {Object} Contact\n * @property {string} firstName\n * @property {string} lastName\n * @property {string} address\n * @property {number} city\n * @property {string} email\n */\n\n/**\n * Permet de r\u00E9cup\u00E9rer des donn\u00E9es en JSON sur une API \n * @param {string} url \n * @param {Object} options \n * @return {Promise<Object>}\n */\nconst fetchJSON = async (url, options = {}) => {\n    const response = await fetch(`${api_url}${url}`, {\n        ...options,\n        headers: {\n            Accept: \"application/json\",\n            ...options.headers,\n        },\n    });\n    if (!response.ok) {\n        throw new Error(\n            `Pas de r\u00E9ponse du serveur ! status: ${response.status}`,\n            { cause: response }\n        );\n    }\n    const data = await response.json();\n    return data;\n};\n\n\n/**\n * Permet de r\u00E9cup\u00E9rer les donn\u00E9es de tous les produits\n * @returns {Promise<ProductData[]>}\n */\nexport const fetchAllProduct = async () => {\n    const response = await fetchJSON(`/products`, {\n        method: 'GET'\n    });\n    return response\n}\n\n\n/**\n * Permet de r\u00E9cup\u00E9rer les donn\u00E9es d'un produit en particulier\n * @param {string} id \n * @returns {Promise<ProductData>}\n */\nexport const fetchProduct = async (id) => {\n    const response = await fetchJSON(`/products/${id}`, {\n        method: 'GET'\n    });\n    return response\n}\n\n\n/**\n * Permet de r\u00E9cup\u00E9rer les donn\u00E9es de plusieurs produits en particulier\n * @param {Array<string>} ids \n * @returns {Promise<ProductData[]>}\n */\nexport const fetchMultipleProduct = async (ids) => {\n    const request = []\n    for (const id of ids) {\n        request.push(fetchProduct(id))\n    }\n    const response = await Promise.all(request)\n    return response\n}\n\n/**\n * Permet d'envoyer la confirmation de commande \u00E0 l'API\n * @param {Contact} contact \n * @param {Array<string>} products \n * @returns {Promise<{contact : Contact, products : ProductData, orderId: string}>}\n */\nexport const fetchOrder = async (contact, products) => {\n    const body = JSON.stringify({\n        contact: contact,\n        products : products\n    })\n    const response = await fetchJSON(`/products/order`, {\n        method: 'POST',\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n        },\n        body: body\n    })\n    return response\n}", "/**\n * Permet de cr\u00E9er des \u00E9l\u00E9ment HTML avec des attributs plus facilement\n * \n * @param {string} tagName\n * @param {Object} attributes\n * @return {HTMLElement}\n */\nexport const createElement = (tagName, attributes = {}) => {\n    const element = document.createElement(tagName)\n    for (const [attribute, value] of Object.entries(attributes)) {\n        element.setAttribute(attribute, value)\n    }\n    return element\n}", "import { createElement } from \"../functions/dom.js\";\n\nexport class Loading {\n    /**\n     * @type {HTMLElement}\n     */\n    #element;\n    constructor() {\n        const loading = createElement(\"p\");\n        loading.style.fontSize = \"1.5rem\";\n        loading.style.fontWeight = \"bold\";\n        loading.innerText = \"LOADING ...\";\n        this.#element = loading\n    }\n    get element () {\n        return this.#element\n    }\n}\n", "/**\n * Permet de v\u00E9rifi\u00E9 si une cha\u00EEne de caract\u00E8re est vide\n * @param {string}\n * @returns {boolean}\n */\nexport const isEmpty = (string) => {\n    if(!string || string === '') {\n        return true\n    } else {\n        return false\n    }\n}\n/**\n * Permet de v\u00E9rifier si une cha\u00EEne de caract\u00E8re est un email\n * @param {string} email \n * @returns {boolean}\n */\nexport const isEmail = (email) => {\n    return /^[a-zA-Z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email)\n}\n/**\n * Permet de v\u00E9rifier si une cha\u00EEne de caract\u00E8re est au format Alpha Num\u00E9rique\n * @param {string} string \n * @returns {boolean}\n */\nexport const isAlphaNumeric = (string) => {\n    return /^[a-zA-Z0-9]*$/.test(string)\n}", "import { fetchOrder } from \"../../functions/api.js\";\nimport {\n    isAlphaNumeric,\n    isEmail,\n    isEmpty,\n} from \"../../functions/validation.js\";\n\nexport class BasketForm {\n    /**\n     * @type {Object<HTMLInputElement>}\n     */\n    inputs;\n    /**\n     * @type {Object}\n     */\n    Cart;\n    constructor(Cart) {\n        const inputFirstName = document.querySelector(\"#firstName\");\n        const inputLastName = document.querySelector(\"#lastName\");\n        const inputAddress = document.querySelector(\"#address\");\n        const inputCity = document.querySelector(\"#city\");\n        const inputEmail = document.querySelector(\"#email\");\n        const inputSubmit = document.querySelector(\"#order\");\n        this.inputs = {\n            firstName: inputFirstName,\n            lastName: inputLastName,\n            address: inputAddress,\n            city: inputCity,\n            email: inputEmail,\n        };\n        this.Cart = Cart;\n\n        inputSubmit.addEventListener(\"click\", this.handleSubmit);\n\n        for (const [key, input] of Object.entries(this.inputs)) {\n            input.addEventListener(\"input\", (event) => {\n                this.validation(input);\n            });\n        }\n    }\n    /**\n     * V\u00E9rifie si la valeur d'un input est valide et affiche un message d'error dans le cas contraire\n     * @param {HTMLInputElement} element \n     * @returns {Array<boolean , Object, undefined}\n     */\n    validation = (element) => {\n        const errorElement = document.querySelector(`#${element.id}ErrorMsg`);\n        let isValid\n        try {\n            if (isEmpty(element.value)) throw new Error('Champ non renseign\u00E9')\n            switch (element.id) {\n                case this.inputs.email.id:\n                    if (!isEmail(element.value)) throw new Error('Email entr\u00E9 non valide')\n                    break;\n                default:\n                    if (!isAlphaNumeric(element.value)) throw new Error('Caract\u00E8res sp\u00E9ciaux non accept\u00E9')\n            }\n            element.style.border = 'none'\n            errorElement.textContent = ''\n            return [isValid = true, undefined]\n        } catch (error) {\n            console.warn(error);\n            element.style.border = '2px solid red'\n            errorElement.textContent = error.message;\n            return [isValid = false, error]\n        }\n    };\n    /**\n     * V\u00E9rifie si les valeur des inputs sont correct et renvoie les information de l'utilisateur si c'est le cas\n     * @returns {Array<boolean, Object>}\n     */\n    checkAllInput = () => {\n        let contactData = {}\n        let errors = []\n        for (const [key, input] of Object.entries(this.inputs)) {\n            const [valid, err] = this.validation(input);\n            valid ? contactData = { ...contactData, [key]: input.value } : errors.push(err);\n        }\n        const isValid = errors.length === 0\n        return [isValid, contactData]\n    }\n    /**\n     * Envoie les information de l'utilisateur si les donn\u00E9es sont valide\n     * @param {SubmitEvent} event \n     */\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const [isValid, contactData] = this.checkAllInput()\n        if(!isValid) return\n        const products = this.Cart.cart.map((element) => {\n            return element.id;\n        });\n            fetchOrder(contactData, products)\n                .then((order) => {\n                    localStorage.clear()\n                    document.location.href =`confirmation.html?id=${order.orderId}`;\n                })\n                .catch((error) => console.error(error));\n    };\n}\n", "import { createElement } from \"../../functions/dom.js\";\nexport class BasketItem {\n    /**\n     * @type {HTMLElement}\n     */\n    element;\n    /**\n     * @type {import(\"./Basket.js\").DataItem}\n     */\n    dataItem;\n    /**\n     * @type {HTMLElement}\n     */\n    itemQuantity;\n    /**\n     * @type {Object}\n     */\n    Cart;\n    /**\n     * @type {Function}\n     */\n    displayIfCartEmpty;\n    /**\n     * @type {Function}\n     */\n    updateTotal;\n    /**\n     * Cr\u00E9er un \u00E9l\u00E9ment du panier\n     * @param {import(\"./Basket.js\").DataItem} dataItem \n     * @param {Object} Cart \n     * @param {Function} displayIfCartEmpty \n     * @param {Function} updateTotal \n     */\n    constructor(dataItem, Cart, displayIfCartEmpty, updateTotal) {\n        const article = createElement(\"article\", {\n            class: \"cart__item\",\n        });\n        const divImg = createElement(\"div\", {\n            class: \"cart__item__img\",\n        });\n        const img = createElement(\"img\", {\n            src: `${dataItem.imgUrl}`,\n            alt: `${dataItem.altTxt}`,\n        });\n        const divContent = createElement(\"div\", {\n            class: \"cart__item__content\",\n        });\n        const divDescription = createElement(\"div\", {\n            class: \"cart__item__content__description\",\n        });\n        const descriptionTitle = createElement(\"h2\");\n        descriptionTitle.innerText = dataItem.name;\n        const descriptionColor = createElement(\"p\");\n        descriptionColor.innerText = dataItem.color;\n        const descriptionPrice = createElement(\"p\");\n        descriptionPrice.innerText = dataItem.price + \" \u20AC\";\n\n        const itemSettings = new ItemSettings(\n            dataItem,\n            Cart,\n            this.deleteItem,\n            updateTotal\n        );\n        article.append(divImg);\n        article.append(divContent);\n        divImg.append(img);\n        divContent.append(divDescription);\n        divContent.append(itemSettings.element);\n        divDescription.append(descriptionTitle);\n        divDescription.append(descriptionColor);\n        divDescription.append(descriptionPrice);\n\n        this.element = article;\n        this.itemQuantity = itemSettings.itemQuantity;\n        this.dataItem = dataItem;\n        this.Cart = Cart;\n        this.displayIfCartEmpty = displayIfCartEmpty;\n        this.updateTotal = updateTotal;\n    }\n\n    /**\n     * Supprime l'\u00E9l\u00E9ment\n     */\n    deleteItem = () => {\n        this.Cart.removeCart(\n            this.dataItem.id,\n            this.dataItem.color,\n            Number(this.itemQuantity.value)\n        );\n        this.updateTotal();\n        this.displayIfCartEmpty();\n        this.element.remove();\n    };\n}\n\nclass ItemSettings {\n    /**\n     * @type {HTMLElement}\n     */\n    element;\n    /**\n     * @type {import(\"./Basket.js\").DataItem}\n     */\n    dataItem;\n    /**\n     * @type {Object}\n     */\n    Cart;\n    /**\n     * @type {HTMLElement}\n     */\n    itemQuantity;\n    /**\n     * @type {Function}\n     */\n    updateTotal;\n    /**\n     * @type {Function}\n     */\n    deleteItem;\n\n    /**\n     * Cr\u00E9er le composant setting qui indique le le nom, le prix et la quantit\u00E9 du produit\n     * @param {import(\"./Basket.js\").DataItem} dataItem \n     * @param {Object} Cart \n     * @param {Function} deleteItem \n     * @param {Function} updateTotal \n     */\n    constructor(dataItem, Cart, deleteItem ,updateTotal) {\n        const divSettings = createElement(\"div\", {\n            class: \"cart__item__content__settings\",\n        });\n        const divSettingsQuantity = createElement(\"div\", {\n            class: \"cart__item__content__settings__quantity\",\n        });\n        const pQuantity = createElement(\"p\");\n        pQuantity.innerText = \"Qt\u00E9 : \";\n\n        const inputQuantity = createElement(\"input\", {\n            type: \"number\",\n            class: \"itemQuantity\",\n            name: \"itemQuantity\",\n            min: \"1\",\n            max: \"100\",\n            value: dataItem.quantity,\n        });\n        const divSettingsDelete = createElement(\"div\", {\n            class: \"cart__item__content__settings__delete\",\n        });\n        const pDeleteItem = createElement(\"p\", {\n            class: \"deleteItem\",\n        });\n        pDeleteItem.innerText = \"Supprimer\";\n\n        divSettings.append(divSettingsQuantity);\n        divSettings.append(divSettingsDelete);\n        divSettingsQuantity.append(pQuantity);\n        divSettingsQuantity.append(inputQuantity);\n        divSettingsDelete.append(pDeleteItem);\n\n        this.element = divSettings;\n        this.dataItem = dataItem;\n        this.Cart = Cart;\n        this.itemQuantity = inputQuantity;\n        this.updateTotal = updateTotal;\n        this.deleteItem = deleteItem;\n\n        pDeleteItem.addEventListener(\"click\", this.deleteItem);\n        inputQuantity.addEventListener(\"change\", this.handleChangeQuantity);\n    }\n    /**\n     * Change la quantit\u00E9 du produit dans le panier \n     * @param {Event} event \n     * @returns {undefined}\n     */\n    handleChangeQuantity = (event) => {\n        let value = Number(event.target.value);\n        const defaultValue = Number(event.target.defaultValue);\n        // Change la value a 0 si la valeur est inf\u00E9rieur a 0 \n        if (value < 0) {\n            event.target.value = 0;\n            value = 0;\n        }\n        // Supprime le produit du panier si la quantit\u00E9 est de 0\n        if (value === 0) {\n            this.deleteItem();\n            return;\n        }\n        // Modifie la quantit\u00E9 si elle est sup\u00E9rieur \u00E0 100\n        if (value > 100) {\n            event.target.value = 100\n            value = 100\n        }\n        // Augmente la quantit\u00E9 du produit si la value est sup\u00E9rieur \u00E0 la value d'origine\n        if (value > defaultValue) {\n            console.log(\"add one\", `before:${defaultValue} after:${value} `);\n            this.Cart.addCart(\n                this.dataItem.id,\n                this.dataItem.color,\n                value - defaultValue\n            );\n        } else if( value < defaultValue){ // Baisse la quantit\u00E9 du produit si la value  inf\u00E9rieur \u00E0 la value d'origine \n            console.log(\"del one\", `before:${defaultValue} after:${value} `);\n            this.Cart.removeCart(\n                this.dataItem.id,\n                this.dataItem.color,\n                defaultValue - value\n            );\n        }\n        // Change la valeur d'origine\n        event.target.defaultValue = value;\n        // Met \u00E0 jour le prix total\n        this.updateTotal();\n    };\n}\n", "export class BasketTotal {\n    /**\n     * @type {HTMLElement}\n     */\n    element;\n\n    /**\n     * @type {Object}\n     */\n    Cart;\n\n    /**\n     * @type {import(\"../../functions/api\").ProductData[]}\n     */\n    productsData;\n\n    /**\n     * @type {Function}\n     */\n    totalPrice;\n\n    /**\n     * @type {Function}\n     */\n    totalQuantity\n    /**\n     * Cr\u00E9er le composant BasketTotal\n     * @param {import(\"../../functions/api\").ProductData[]} productsCartData \n     * @param {Object} Cart \n     */\n    constructor(productsCartData, Cart) {\n        const basketTotal = document.querySelector('.cart__price')\n        const totalQuantity = document.querySelector(\"#totalQuantity\");\n        const totalPrice = document.querySelector(\"#totalPrice\");\n\n        this.element = basketTotal\n        this.Cart = Cart;\n        this.productsData = productsCartData;\n        this.totalPrice = totalPrice;\n        this.totalQuantity = totalQuantity;\n\n        this.updateTotal();\n    }\n\n    /**\n     * Met \u00E0 Jour le prix total et le nombre d'article affich\u00E9\n     * @returns {undefined}\n     */\n    updateTotal = () => {\n        this.totalPrice.textContent = this.getTotalPrice();\n        this.totalQuantity.textContent = this.getTotalArticle();\n    };\n\n    /**\n     * Renvoie le prix total des produits dans le panier\n     * @returns {number} Prix total\n     */\n    getTotalPrice = () => {\n        // Ne fais rien si le panier est vide\n        if (this.Cart.isCartEmpty()) return;\n\n        // Cr\u00E9er un nouveau tableau d'\u00E9l\u00E9ment \u00E0 partir du panier et des donn\u00E9es obtenu \n        const itemsCart = this.Cart.cart.map((product) => {\n            const find = this.productsData.find(\n                (element) => element._id === product.id\n            );\n            return {\n                id: product.id,\n                color: product.color,\n                quantity: Number(product.quantity),\n                price: Number(find.price)\n            };\n        });\n        let total = 0;\n        for (const itemCart of itemsCart) {\n            total += itemCart.price * itemCart.quantity\n        }\n        return total\n    };\n    /**\n     * Retourne la quantit\u00E9 total d'article dans le panier\n     * @returns {number}\n     */\n    getTotalArticle = () => {\n        if (this.Cart.isCartEmpty()) return;\n        let total = 0;\n        for (const itemCart of this.Cart.cart) {\n            total += itemCart.quantity\n        }\n        return total\n    }\n}\n", "import { fetchMultipleProduct } from \"../../functions/api.js\";\nimport { Loading } from \"../Loading.js\";\nimport { BasketForm } from \"./BasketForm.js\";\nimport { BasketItem } from \"./BasketItem.js\";\nimport { BasketTotal } from \"./BasketTotal.js\";\n\n/**\n * @typedef {Object} DataItem\n * @property {string} id\n * @property {string} imgUrl\n * @property {string} imgAltText\n * @property {string} name\n * @property {string} color\n * @property {number} price\n * @property {number} quantity\n */\nexport class Basket {\n    /**\n     * @type {HTMLElement}\n     */\n    element;\n    /**\n     * @type {Object}\n     */\n    Cart;\n    constructor(productsCartData, Cart) {\n        // Initialise le composant BasketTotal\n        const basketTotal = new BasketTotal(productsCartData, Cart);\n        // initialise le composant BasketForm\n        const basketForm = new BasketForm(Cart);\n\n        const basket = document.querySelector(\"#cart\");\n        const sectionCartItem = document.querySelector(\"#cart__items\");\n        // Cr\u00E9er un composant CartItem pour chaque produit dans le panier\n        for (const cartItemInfo of Cart.cart) {\n          // R\u00E9cup\u00E8re les data du produit\n            const cartItemData = productsCartData.find(\n                (element) => element._id === cartItemInfo.id\n            );\n            if(!cartItemData) throw new Error('Les information du panier sont invalide')\n            /**\n             * @type {DataItem}\n             */\n            const dataItem = {\n              id: cartItemInfo.id,\n              imgUrl: cartItemData.imageUrl,\n              imgAltText: cartItemData.altTxt,\n              name: cartItemData.name,\n              color: cartItemInfo.color,\n              price: cartItemData.price,\n              quantity: cartItemInfo.quantity\n            };\n            const basketItem = new BasketItem(\n                dataItem,\n                Cart,\n                this.displayIfCartEmpty,\n                basketTotal.updateTotal\n            );\n            sectionCartItem.append(basketItem.element);\n        }\n        this.element = basket;\n        this.Cart = Cart;\n        this.displayIfCartEmpty();\n    }\n    /**\n     * R\u00E9cup\u00E8re les donn\u00E9es et cr\u00E9er un nouvel object de lui m\u00EAme avec les donn\u00E9es r\u00E9cup\u00E9r\u00E9\n     * @param {HTMLElement} element\n     * @param {Object} Cart\n     * @returns {Promise<Object>}\n     */\n    static initialize = async (element, Cart) => {\n        try {\n            /**\n             * @type {HTMLElement}\n             */\n            const loading = new Loading().element;\n            element.append(loading);\n            const productsCartData = await fetchMultipleProduct(\n                Cart.getCartProductIds()\n            );\n            loading.remove();\n            return new Basket(productsCartData, Cart);\n        } catch (error) {\n            console.warn(error);\n        }\n    };\n    /**\n     * Affiche un message si il n'y a aucun produit dans le panier\n     */\n    displayIfCartEmpty = () => {\n        if (this.Cart.isCartEmpty()) {\n            this.element.innerHTML = `\n        <p style=\"text-align: center;font-size: 1.25rem\">Aucun produit dans le panier</p>\n        `;\n        }\n    };\n}\n", "import { Cart } from \"./utils/Cart.js\";\nimport { Basket } from \"./components/Basket/Basket.js\";\n\nconst cartContainer = document.querySelector(\"#cart\");\n\nconst display = async () => {\n    try {\n        await Basket.initialize(cartContainer, new Cart());\n    } catch (error) {\n        console.error(error)\n    }\n};\ndisplay();\n"],
  "mappings": "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",
  "names": ["Cart", "data", "id", "color", "quantity", "addQuantity", "find", "element", "totalQuantity", "findQuantity", "removeQuantity", "indexOfObjet", "cartData", "productsId", "product", "maxQuantity", "quantityRestant", "api_url", "fetchJSON", "url", "options", "response", "fetchProduct", "id", "fetchJSON", "fetchMultipleProduct", "ids", "request", "fetchOrder", "contact", "products", "body", "createElement", "tagName", "attributes", "element", "attribute", "value", "Loading", "#element", "loading", "createElement", "isEmpty", "string", "isEmail", "email", "isAlphaNumeric", "BasketForm", "Cart", "inputFirstName", "inputLastName", "inputAddress", "inputCity", "inputEmail", "inputSubmit", "key", "input", "event", "element", "errorElement", "isValid", "isEmpty", "isEmail", "isAlphaNumeric", "error", "contactData", "errors", "valid", "err", "products", "fetchOrder", "order", "BasketItem", "dataItem", "Cart", "displayIfCartEmpty", "updateTotal", "article", "createElement", "divImg", "img", "divContent", "divDescription", "descriptionTitle", "descriptionColor", "descriptionPrice", "itemSettings", "ItemSettings", "deleteItem", "divSettings", "divSettingsQuantity", "pQuantity", "inputQuantity", "divSettingsDelete", "pDeleteItem", "event", "value", "defaultValue", "BasketTotal", "productsCartData", "Cart", "basketTotal", "totalQuantity", "totalPrice", "itemsCart", "product", "find", "element", "total", "itemCart", "_Basket", "productsCartData", "Cart", "basketTotal", "BasketTotal", "basketForm", "BasketForm", "basket", "sectionCartItem", "cartItemInfo", "cartItemData", "element", "dataItem", "basketItem", "BasketItem", "Basket", "__publicField", "loading", "Loading", "fetchMultipleProduct", "error", "cartContainer", "display", "Basket", "Cart", "error"]
}
